/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CallServiceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "executeCall"
      | "executeRollback"
      | "getBtpAddress"
      | "getFee"
      | "getProtocolFee"
      | "getProtocolFeeHandler"
      | "handleBTPError"
      | "handleBTPMessage"
      | "initialize"
      | "sendCallMessage"
      | "setAdmin"
      | "setProtocolFee"
      | "setProtocolFeeHandler"
      | "tryHandleCallMessage"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CallExecuted"
      | "CallMessage"
      | "CallMessageSent"
      | "Initialized"
      | "ResponseMessage"
      | "RollbackExecuted"
      | "RollbackMessage"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeCall",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRollback",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBtpAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeeHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handleBTPError",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "handleBTPMessage",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCallMessage",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeHandler",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tryHandleCallMessage",
    values: [AddressLike, string, string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRollback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBtpAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeeHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleBTPError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleBTPMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendCallMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryHandleCallMessage",
    data: BytesLike
  ): Result;
}

export namespace CallExecutedEvent {
  export type InputTuple = [
    _reqId: BigNumberish,
    _code: BigNumberish,
    _msg: string
  ];
  export type OutputTuple = [_reqId: bigint, _code: bigint, _msg: string];
  export interface OutputObject {
    _reqId: bigint;
    _code: bigint;
    _msg: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallMessageEvent {
  export type InputTuple = [
    _from: string,
    _to: string,
    _sn: BigNumberish,
    _reqId: BigNumberish
  ];
  export type OutputTuple = [
    _from: string,
    _to: string,
    _sn: bigint,
    _reqId: bigint
  ];
  export interface OutputObject {
    _from: string;
    _to: string;
    _sn: bigint;
    _reqId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CallMessageSentEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: string,
    _sn: BigNumberish,
    _nsn: BigNumberish
  ];
  export type OutputTuple = [
    _from: string,
    _to: string,
    _sn: bigint,
    _nsn: bigint
  ];
  export interface OutputObject {
    _from: string;
    _to: string;
    _sn: bigint;
    _nsn: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResponseMessageEvent {
  export type InputTuple = [
    _sn: BigNumberish,
    _code: BigNumberish,
    _msg: string
  ];
  export type OutputTuple = [_sn: bigint, _code: bigint, _msg: string];
  export interface OutputObject {
    _sn: bigint;
    _code: bigint;
    _msg: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RollbackExecutedEvent {
  export type InputTuple = [
    _sn: BigNumberish,
    _code: BigNumberish,
    _msg: string
  ];
  export type OutputTuple = [_sn: bigint, _code: bigint, _msg: string];
  export interface OutputObject {
    _sn: bigint;
    _code: bigint;
    _msg: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RollbackMessageEvent {
  export type InputTuple = [_sn: BigNumberish];
  export type OutputTuple = [_sn: bigint];
  export interface OutputObject {
    _sn: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CallService extends BaseContract {
  connect(runner?: ContractRunner | null): CallService;
  waitForDeployment(): Promise<this>;

  interface: CallServiceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  executeCall: TypedContractMethod<
    [_reqId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeRollback: TypedContractMethod<
    [_sn: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBtpAddress: TypedContractMethod<[], [string], "view">;

  getFee: TypedContractMethod<
    [_net: string, _rollback: boolean],
    [bigint],
    "view"
  >;

  getProtocolFee: TypedContractMethod<[], [bigint], "view">;

  getProtocolFeeHandler: TypedContractMethod<[], [string], "view">;

  handleBTPError: TypedContractMethod<
    [
      _src: string,
      _svc: string,
      _sn: BigNumberish,
      _code: BigNumberish,
      _msg: string
    ],
    [void],
    "nonpayable"
  >;

  handleBTPMessage: TypedContractMethod<
    [_from: string, _svc: string, _sn: BigNumberish, _msg: BytesLike],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<[_bmc: AddressLike], [void], "nonpayable">;

  sendCallMessage: TypedContractMethod<
    [_to: string, _data: BytesLike, _rollback: BytesLike],
    [bigint],
    "payable"
  >;

  setAdmin: TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;

  setProtocolFee: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolFeeHandler: TypedContractMethod<
    [_addr: AddressLike],
    [void],
    "nonpayable"
  >;

  tryHandleCallMessage: TypedContractMethod<
    [toAddr: AddressLike, to: string, from: string, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeCall"
  ): TypedContractMethod<[_reqId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeRollback"
  ): TypedContractMethod<[_sn: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBtpAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<[_net: string, _rollback: boolean], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProtocolFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProtocolFeeHandler"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "handleBTPError"
  ): TypedContractMethod<
    [
      _src: string,
      _svc: string,
      _sn: BigNumberish,
      _code: BigNumberish,
      _msg: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleBTPMessage"
  ): TypedContractMethod<
    [_from: string, _svc: string, _sn: BigNumberish, _msg: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_bmc: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendCallMessage"
  ): TypedContractMethod<
    [_to: string, _data: BytesLike, _rollback: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFee"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFeeHandler"
  ): TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tryHandleCallMessage"
  ): TypedContractMethod<
    [toAddr: AddressLike, to: string, from: string, data: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CallExecuted"
  ): TypedContractEvent<
    CallExecutedEvent.InputTuple,
    CallExecutedEvent.OutputTuple,
    CallExecutedEvent.OutputObject
  >;
  getEvent(
    key: "CallMessage"
  ): TypedContractEvent<
    CallMessageEvent.InputTuple,
    CallMessageEvent.OutputTuple,
    CallMessageEvent.OutputObject
  >;
  getEvent(
    key: "CallMessageSent"
  ): TypedContractEvent<
    CallMessageSentEvent.InputTuple,
    CallMessageSentEvent.OutputTuple,
    CallMessageSentEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "ResponseMessage"
  ): TypedContractEvent<
    ResponseMessageEvent.InputTuple,
    ResponseMessageEvent.OutputTuple,
    ResponseMessageEvent.OutputObject
  >;
  getEvent(
    key: "RollbackExecuted"
  ): TypedContractEvent<
    RollbackExecutedEvent.InputTuple,
    RollbackExecutedEvent.OutputTuple,
    RollbackExecutedEvent.OutputObject
  >;
  getEvent(
    key: "RollbackMessage"
  ): TypedContractEvent<
    RollbackMessageEvent.InputTuple,
    RollbackMessageEvent.OutputTuple,
    RollbackMessageEvent.OutputObject
  >;

  filters: {
    "CallExecuted(uint256,int256,string)": TypedContractEvent<
      CallExecutedEvent.InputTuple,
      CallExecutedEvent.OutputTuple,
      CallExecutedEvent.OutputObject
    >;
    CallExecuted: TypedContractEvent<
      CallExecutedEvent.InputTuple,
      CallExecutedEvent.OutputTuple,
      CallExecutedEvent.OutputObject
    >;

    "CallMessage(string,string,uint256,uint256)": TypedContractEvent<
      CallMessageEvent.InputTuple,
      CallMessageEvent.OutputTuple,
      CallMessageEvent.OutputObject
    >;
    CallMessage: TypedContractEvent<
      CallMessageEvent.InputTuple,
      CallMessageEvent.OutputTuple,
      CallMessageEvent.OutputObject
    >;

    "CallMessageSent(address,string,uint256,int256)": TypedContractEvent<
      CallMessageSentEvent.InputTuple,
      CallMessageSentEvent.OutputTuple,
      CallMessageSentEvent.OutputObject
    >;
    CallMessageSent: TypedContractEvent<
      CallMessageSentEvent.InputTuple,
      CallMessageSentEvent.OutputTuple,
      CallMessageSentEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "ResponseMessage(uint256,int256,string)": TypedContractEvent<
      ResponseMessageEvent.InputTuple,
      ResponseMessageEvent.OutputTuple,
      ResponseMessageEvent.OutputObject
    >;
    ResponseMessage: TypedContractEvent<
      ResponseMessageEvent.InputTuple,
      ResponseMessageEvent.OutputTuple,
      ResponseMessageEvent.OutputObject
    >;

    "RollbackExecuted(uint256,int256,string)": TypedContractEvent<
      RollbackExecutedEvent.InputTuple,
      RollbackExecutedEvent.OutputTuple,
      RollbackExecutedEvent.OutputObject
    >;
    RollbackExecuted: TypedContractEvent<
      RollbackExecutedEvent.InputTuple,
      RollbackExecutedEvent.OutputTuple,
      RollbackExecutedEvent.OutputObject
    >;

    "RollbackMessage(uint256)": TypedContractEvent<
      RollbackMessageEvent.InputTuple,
      RollbackMessageEvent.OutputTuple,
      RollbackMessageEvent.OutputObject
    >;
    RollbackMessage: TypedContractEvent<
      RollbackMessageEvent.InputTuple,
      RollbackMessageEvent.OutputTuple,
      RollbackMessageEvent.OutputObject
    >;
  };
}
