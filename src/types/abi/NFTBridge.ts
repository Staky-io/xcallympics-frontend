/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface NFTBridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowBridgeAddress"
      | "authorizedBridges"
      | "bridgeNFToChain"
      | "bridgesNID"
      | "callSvc"
      | "callSvcBtpAddr"
      | "getXCallFee"
      | "handleCallMessage"
      | "initialize"
      | "nativeTokens"
      | "networkID"
      | "owner"
      | "renounceOwnership"
      | "revokeBridgeAddress"
      | "setCallServiceAdress"
      | "setWrappedMultiTokenNFTAdress"
      | "setWrappedSingleTokenNFTAdress"
      | "testXCall"
      | "transferOwnership"
      | "wrappedMultiTokenNftAddress"
      | "wrappedSingleTokenNftAddress"
      | "wrappedTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "MessageReceived"
      | "MessageSent"
      | "OwnershipTransferred"
      | "RollbackDataReceived"
      | "TokenMinted"
      | "TokenUnlocked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowBridgeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedBridges",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeNFToChain",
    values: [string, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bridgesNID", values: [string]): string;
  encodeFunctionData(functionFragment: "callSvc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "callSvcBtpAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getXCallFee",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "handleCallMessage",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "networkID", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeBridgeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCallServiceAdress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedMultiTokenNFTAdress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedSingleTokenNFTAdress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testXCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedMultiTokenNftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSingleTokenNftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedTokens",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedBridges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeNFToChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridgesNID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callSvc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callSvcBtpAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getXCallFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleCallMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "networkID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeBridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCallServiceAdress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedMultiTokenNFTAdress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedSingleTokenNFTAdress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testXCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedMultiTokenNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSingleTokenNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedTokens",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageReceivedEvent {
  export type InputTuple = [_from: string, _data: BytesLike];
  export type OutputTuple = [_from: string, _data: string];
  export interface OutputObject {
    _from: string;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [
    _from: AddressLike,
    _messageId: BigNumberish,
    _data: BytesLike
  ];
  export type OutputTuple = [_from: string, _messageId: bigint, _data: string];
  export interface OutputObject {
    _from: string;
    _messageId: bigint;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RollbackDataReceivedEvent {
  export type InputTuple = [_from: string, _data: BytesLike];
  export type OutputTuple = [_from: string, _data: string];
  export interface OutputObject {
    _from: string;
    _data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenMintedEvent {
  export type InputTuple = [
    _token: AddressLike,
    _to: AddressLike,
    _id: BigNumberish,
    _value: BigNumberish
  ];
  export type OutputTuple = [
    _token: string,
    _to: string,
    _id: bigint,
    _value: bigint
  ];
  export interface OutputObject {
    _token: string;
    _to: string;
    _id: bigint;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenUnlockedEvent {
  export type InputTuple = [
    _token: AddressLike,
    _to: AddressLike,
    _id: BigNumberish,
    _value: BigNumberish
  ];
  export type OutputTuple = [
    _token: string,
    _to: string,
    _id: bigint,
    _value: bigint
  ];
  export interface OutputObject {
    _token: string;
    _to: string;
    _id: bigint;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFTBridge extends BaseContract {
  connect(runner?: ContractRunner | null): NFTBridge;
  waitForDeployment(): Promise<this>;

  interface: NFTBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowBridgeAddress: TypedContractMethod<
    [_bridgeBTPAddress: string],
    [void],
    "nonpayable"
  >;

  authorizedBridges: TypedContractMethod<[arg0: string], [boolean], "view">;

  bridgeNFToChain: TypedContractMethod<
    [
      _to: string,
      _inputToken: AddressLike,
      _id: BigNumberish,
      _value: BigNumberish
    ],
    [void],
    "payable"
  >;

  bridgesNID: TypedContractMethod<[arg0: string], [string], "view">;

  callSvc: TypedContractMethod<[], [string], "view">;

  callSvcBtpAddr: TypedContractMethod<[], [string], "view">;

  getXCallFee: TypedContractMethod<
    [_to: string, _useCallback: boolean],
    [bigint],
    "view"
  >;

  handleCallMessage: TypedContractMethod<
    [_from: string, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [_callServiceAddress: AddressLike, _networkID: string],
    [void],
    "nonpayable"
  >;

  nativeTokens: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  networkID: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeBridgeAddress: TypedContractMethod<
    [_bridgeBTPAddress: string],
    [void],
    "nonpayable"
  >;

  setCallServiceAdress: TypedContractMethod<
    [_callServiceAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setWrappedMultiTokenNFTAdress: TypedContractMethod<
    [_wrappedMultiTokenNftAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setWrappedSingleTokenNFTAdress: TypedContractMethod<
    [_wrappedSingleTokenNftAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  testXCall: TypedContractMethod<
    [_from: string, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  wrappedMultiTokenNftAddress: TypedContractMethod<[], [string], "view">;

  wrappedSingleTokenNftAddress: TypedContractMethod<[], [string], "view">;

  wrappedTokens: TypedContractMethod<[arg0: string], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowBridgeAddress"
  ): TypedContractMethod<[_bridgeBTPAddress: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedBridges"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "bridgeNFToChain"
  ): TypedContractMethod<
    [
      _to: string,
      _inputToken: AddressLike,
      _id: BigNumberish,
      _value: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "bridgesNID"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "callSvc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "callSvcBtpAddr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getXCallFee"
  ): TypedContractMethod<
    [_to: string, _useCallback: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleCallMessage"
  ): TypedContractMethod<
    [_from: string, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_callServiceAddress: AddressLike, _networkID: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nativeTokens"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "networkID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeBridgeAddress"
  ): TypedContractMethod<[_bridgeBTPAddress: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCallServiceAdress"
  ): TypedContractMethod<
    [_callServiceAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWrappedMultiTokenNFTAdress"
  ): TypedContractMethod<
    [_wrappedMultiTokenNftAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWrappedSingleTokenNFTAdress"
  ): TypedContractMethod<
    [_wrappedSingleTokenNftAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "testXCall"
  ): TypedContractMethod<
    [_from: string, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "wrappedMultiTokenNftAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wrappedSingleTokenNftAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wrappedTokens"
  ): TypedContractMethod<[arg0: string], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MessageReceived"
  ): TypedContractEvent<
    MessageReceivedEvent.InputTuple,
    MessageReceivedEvent.OutputTuple,
    MessageReceivedEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RollbackDataReceived"
  ): TypedContractEvent<
    RollbackDataReceivedEvent.InputTuple,
    RollbackDataReceivedEvent.OutputTuple,
    RollbackDataReceivedEvent.OutputObject
  >;
  getEvent(
    key: "TokenMinted"
  ): TypedContractEvent<
    TokenMintedEvent.InputTuple,
    TokenMintedEvent.OutputTuple,
    TokenMintedEvent.OutputObject
  >;
  getEvent(
    key: "TokenUnlocked"
  ): TypedContractEvent<
    TokenUnlockedEvent.InputTuple,
    TokenUnlockedEvent.OutputTuple,
    TokenUnlockedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MessageReceived(string,bytes)": TypedContractEvent<
      MessageReceivedEvent.InputTuple,
      MessageReceivedEvent.OutputTuple,
      MessageReceivedEvent.OutputObject
    >;
    MessageReceived: TypedContractEvent<
      MessageReceivedEvent.InputTuple,
      MessageReceivedEvent.OutputTuple,
      MessageReceivedEvent.OutputObject
    >;

    "MessageSent(address,uint256,bytes)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RollbackDataReceived(string,bytes)": TypedContractEvent<
      RollbackDataReceivedEvent.InputTuple,
      RollbackDataReceivedEvent.OutputTuple,
      RollbackDataReceivedEvent.OutputObject
    >;
    RollbackDataReceived: TypedContractEvent<
      RollbackDataReceivedEvent.InputTuple,
      RollbackDataReceivedEvent.OutputTuple,
      RollbackDataReceivedEvent.OutputObject
    >;

    "TokenMinted(address,address,uint256,uint256)": TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;
    TokenMinted: TypedContractEvent<
      TokenMintedEvent.InputTuple,
      TokenMintedEvent.OutputTuple,
      TokenMintedEvent.OutputObject
    >;

    "TokenUnlocked(address,address,uint256,uint256)": TypedContractEvent<
      TokenUnlockedEvent.InputTuple,
      TokenUnlockedEvent.OutputTuple,
      TokenUnlockedEvent.OutputObject
    >;
    TokenUnlocked: TypedContractEvent<
      TokenUnlockedEvent.InputTuple,
      TokenUnlockedEvent.OutputTuple,
      TokenUnlockedEvent.OutputObject
    >;
  };
}
